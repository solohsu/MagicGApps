#!/sbin/sh -x
# Magic GApps Installer
# Copyright (C) 2017-2018, VR25 @ xda-developers
# License: GPL v3+

# detect whether in boot mode
getprop | grep zygote | grep -q running && bootMode=true || bootMode=false

# Default permissions
umask 022

##########################################################################################
# Functions
##########################################################################################

ui_print() {
  $bootMode && echo -e "$1" || echo -e "ui_print $1\nui_print" >> /proc/self/fd/$outFD
}

# not a function, but must be here
if $bootMode; then
  ui_print " "
  ui_print "(!) Boot mode install is not supported"
  ui_print "- Install from recovery mode"
  ui_print " "
  exit 1
fi

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  [ -z "$FILES" ] && FILES='/system/build.prop'
  sed -n "$REGEX" $FILES 2>/dev/null | head -n 1
}

is_mounted() { mountpoint -q "$1" 2>/dev/null; }

mount_check() {
  if is_mounted "$1"; then
    ui_print " "
    ui_print "(!) Failed to bind-mount $1"
    ui_print " "
    exit 1
  fi
}

bind_mount() {
  mount -o bind "$1" "$2"
  if ! is_mounted "$2"; then
    ui_print " "
    ui_print "(!) Failed to bind-mount $2"
    ui_print " "
    exit 1
  fi
}

mount_image() {
  mkdir -p "$2" 2>/dev/null
  if (! is_mounted $2); then
    LOOPDEVICE=
    for LOOP in 0 1 2 3 4 5 6 7; do
      if (! is_mounted $2); then
        LOOPDEVICE=/dev/block/loop$LOOP
        [ -f "$LOOPDEVICE" ] || mknod $LOOPDEVICE b 7 $LOOP 2>/dev/null
        losetup $LOOPDEVICE $1
        if [ "$?" -eq "0" ]; then
          mount -t ext4 -o loop $LOOPDEVICE $2
          is_mounted $2 || /system/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE $2
          is_mounted $2 || /system/bin/toybox mount -t ext4 -o loop $LOOPDEVICE $2
        fi
        is_mounted $2 && break
      fi
    done
  fi
  if ! is_mounted $2; then
    ui_print " "
    ui_print "(!) Failed to mount $IMG"
    ui_print " "
    exit 1
  fi
}

set_perm() {
  chown $2:$3 "$1" || exit 1
  chmod $4 "$1" || exit 1
  [ -z "$5" ] && chcon 'u:object_r:system_file:s0' "$1" || chcon $5 "$1"
}

mktouch() {
  mkdir -p ${1%/*} 2>/dev/null
  [ -z "$2" ] && touch "$1" || echo "$2" > "$1"
  chmod 644 $1
}

image_size_check() {
  e2fsck -yf $1 >&2
  curBlocks=`e2fsck -n $1 2>/dev/null | grep $1 | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=`echo "$curBlocks" | cut -d/ -f1`
  curSizeM=`echo "$curBlocks" | cut -d/ -f1`
  curFreeM=$(((curSizeM - curUsedM) * 4 / 1024))
  curUsedM=$((curUsedM * 4 / 1024 + 1))
  curSizeM=$((curSizeM * 4 / 1024))
}

shrink_img() {
  image_size_check $IMG
  NEWDATASIZE=$((curUsedM / 32 * 32 + 32))
  if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
  /data/adb/magisk/magisk imgtool resize $IMG $SIZE >&2 \
    || /data/adb/magisk/magisk --resizeimg $IMG $SIZE >&2 \
      || resize2fs $IMG ${SIZE}M >&2
  fi
}

unmount_all() {
  umount $mountPath
  losetup -d $LOOPDEVICE
  rmdir $mountPath
  umount -l /system_root
  umount -l /system
  umount -l /vendor
  umount -l /persist
} 2>/dev/null


exxit() {
  if [ "$1" = "0" ]; then
    ui_print "  "
    ui_print "(i) No update found"
    ui_print "- Run \"touch /data/r\" to reinstall"
    ui_print "- Or \"touch /data/u\" to uninstall"
    ui_print " "
  else
    ui_print "  "
    ui_print "(!) No compatible open-gapps-* zip found"
    ui_print "  "
  fi
  unmount_all
  shrink_img
  [ "$1" = "0" ] && exit 0 || exit 1
}


wipe_modPath() {
  mv $modPath/system/etc $INSTALLER/
  rm -rf $modPath
  [ -z "$1" ] && mkdir -p $modPath /data/adb/magisk_simple/system /cache/magisk_mount/system $mountPath/.core/service.d
  if [ -d $INSTALLER/etc ]; then
    for f in $(find $INSTALLER/etc -type f); do
      rm $(echo $f | sed "s:$INSTALLER:/data/adb/magisk_simple/system:") $(echo $f | sed "s:$INSTALLER:/cache/magisk_mount/system:")
    done
    for d in $(find $INSTALLER/etc -type d); do
      rmdir $(echo $d | sed "s:$INSTALLER:/data/adb/magisk_simple/system:") $(echo $d | sed "s:$INSTALLER:/cache/magisk_mount/system:")
    done
  fi
  rm /data/u /data/r
} 2>/dev/null


disable_apks() {
  for file in $(find $modPath -type f -name '.replace'); do
    rm $file
  done
  for d in $sysApp $sysPrivApp $vendorApp; do
    if [ -d "${modPath}$d" ]; then
      [ -z "$(ls "${modPath}$d" 2>/dev/null)" ] \
        && rm -rf "${modPath}$d"
    else
      mktouch "${modPath}$d/.replace"
    fi
  done
}


resolve_link() {
  RESOLVED="$1"
  while RESOLVE=`readlink $RESOLVED`; do
    RESOLVED=$RESOLVE
  done
  echo $RESOLVED
}

find_boot_image() {
  BOOTIMAGE=
  if [ ! -z $SLOT ]; then
    BOOTIMAGE=`find /dev/block -iname boot$SLOT | head -n 1` 2>/dev/null
  fi
  if [ -z "$BOOTIMAGE" ]; then
    # The slot info is incorrect...
    SLOT=
    for BLOCK in boot_a kern-a android_boot kernel boot lnx bootimg; do
      BOOTIMAGE=`find /dev/block -iname $BLOCK | head -n 1` 2>/dev/null
      [ ! -z $BOOTIMAGE ] && break
    done
  fi
  # Recovery fallback
  if [ -z "$BOOTIMAGE" ]; then
    for FSTAB in /etc/*fstab*; do
      BOOTIMAGE=`grep -v '#' $FSTAB | grep -E '/boot[^a-zA-Z]' | grep -oE '/dev/[a-zA-Z0-9_./-]*'`
      [ ! -z $BOOTIMAGE ] && break
    done
  fi
  [ ! -z "$BOOTIMAGE" ] && BOOTIMAGE=`resolve_link $BOOTIMAGE`
}

find_dtbo_image() {
  DTBOIMAGE=`find /dev/block -iname dtbo$SLOT | head -n 1` 2>/dev/null
  [ ! -z $DTBOIMAGE ] && DTBOIMAGE=`resolve_link $DTBOIMAGE`
}


mount_partitions() {
  { mount /data
  mount /cache
  mount /persist; } 2>/dev/null

  # Check A/B slot
  SLOT=`getprop ro.boot.slot_suffix`
  if [ -z $SLOT ]; then
    SLOT=_`getprop ro.boot.slot`
    [ $SLOT = "_" ] && SLOT=
  fi

  # Check the boot image to make sure the slot actually makes sense
  find_boot_image
  find_dtbo_image

  is_mounted /system || [ -f /system/build.prop ] || mount -o ro /system 2>/dev/null
  if ! is_mounted /system && ! [ -f /system/build.prop ]; then
    SYSTEMBLOCK=`find /dev/block -iname system$SLOT | head -n 1`
    mount -t ext4 -o ro $SYSTEMBLOCK /system
  fi

  is_mounted /system || [ -f /system/build.prop ] || { echo "(!) Failed to mount /system"; exit 1; }
  cat /proc/mounts | grep -E '/dev/root|/system_root' >/dev/null && SKIP_INITRAMFS=true || SKIP_INITRAMFS=false
  if [ -f /system/init.rc ]; then
    SKIP_INITRAMFS=true
    mkdir /system_root 2>/dev/null
    mount --move /system /system_root
    mount -o bind /system_root/system /system
  fi

  if [ -L /system/vendor ]; then
    # Seperate /vendor partition
    is_mounted /vendor || mount -o ro /vendor 2>/dev/null
    if ! is_mounted /vendor; then
      VENDORBLOCK=`find /dev/block -iname vendor$SLOT | head -n 1`
      mount -t ext4 -o ro $VENDORBLOCK /vendor
    fi
    is_mounted /vendor || { echo "(!) Failed to mount /vendor"; exit 1; }
  fi
}


mod_info() {
  grep_prop "$1" $INSTALLER/module.prop
}

print_modname() {
  ui_print " "
  ui_print "$(mod_info id) $(mod_info version)"
  ui_print "$(mod_info author)"
  ui_print "Powered by Magisk (@topjohnwu)"
  ui_print " "
  [ -f /data/u ] || ui_print "(i) Searching for the latest compatible open-gapps-* zip"
}

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

# set SELinux mode to "permissive"
setenforce 0

mount -o bind /dev/urandom /dev/random
trap 'umount /dev/random 2>/dev/null' EXIT

outFD=$2
oOutFD=$2
ZIP="$3"

readlink /proc/$$/fd/$outFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  outFD=0

  for FD in `ls /proc/$$/fd`; do
  readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
  if [ "$?" -eq "0" ]; then
    ps | grep " 3 $FD " | grep -v grep >/dev/null
    if [ "$?" -eq "0" ]; then
    outFD=$FD
    break
    fi
  fi
  done
fi

TMPDIR=/dev/tmp
INSTALLER=$TMPDIR/install
mountPath=$TMPDIR/magisk_img
$bootMode && IMGNAME=magisk_merge.img || IMGNAME=magisk.img
[ -d /data/adb/magisk ] && IMG=/data/adb/$IMGNAME || IMG=/data/$IMGNAME

# initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER 2>/dev/null

unzip -o "$ZIP" '*.sh' module.prop -d $INSTALLER >&2

modID="`grep_prop id $INSTALLER/module.prop`"
modPath=$mountPath/$modID

##########################################################################################
# Main
##########################################################################################

# print mod name
print_modname

mount_partitions

API=`grep_prop ro.build.version.sdk`
ABI=`grep_prop ro.product.cpu.abi | cut -c-3`
ABI2=`grep_prop ro.product.cpu.abi2 | cut -c-3`
ABILONG=`grep_prop ro.product.cpu.abi`

ARCH=arm
IS64BIT=false
if [ "$ABI" = "x86" ]; then ARCH=x86; fi;
if [ "$ABI2" = "x86" ]; then ARCH=x86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; IS64BIT=true; fi;
if [ "$ABILONG" = "x86_64" ]; then ARCH=x86_64; IS64BIT=true; fi;

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

if [ ! -f /data/u ]; then
  if [ -f "$IMG" ]; then
    image_size_check $IMG
    if [[ $curFreeM -lt 2048 ]]; then
      SIZE=$(($curSizeM - $curFreeM + 2048))
      /data/adb/magisk/magisk imgtool resize $IMG $SIZE >&2 \
        || /data/adb/magisk/magisk --resizeimg $IMG $SIZE >&2 \
          || resize2fs $IMG ${SIZE}M >&2
    fi
  else
    SIZE=2048
    /data/adb/magisk/magisk imgtool create $IMG $SIZE >&2 \
      || /data/adb/magisk/magisk --createimg $IMG $SIZE >&2 \
        || make_ext4fs -l ${SIZE}M $IMG >&2
  fi
fi

mount_image $IMG $mountPath

# uninstall
if [ -f /data/u ]; then
  ui_print "  "
  ui_print "(i) Uninstalling"
  wipe_modPath u
  unmount_all
  ui_print "  "
  exit 0
fi

CurVerInfo=$modPath/system/etc/g.prop
CurOpenGA_VER=0

# find latest OpenGAPackage
oIFS=$IFS
IFS=$'\n\t'
for f in $(find /external_sd /sdcard -type f -iname open_gapps-*.zip -maxdepth 1 2>/dev/null); do
  if [ "$(unzip -pqqo "$f" g.prop 2>/dev/null | sed -n '/ro.addon.arch/s/.*=//p')" = "$ARCH" ] \
    && [ "$(unzip -pqqo "$f" g.prop 2>/dev/null | sed -n '/ro.addon.sdk/s/.*=//p')" = "$API" ]
  then
    FoundOpenGA_VER="$(unzip -pqqo "$f" g.prop 2>/dev/null | sed -n '/ro.addon.open_version/s/.*=//p')"
    if [ "$FoundOpenGA_VER" -ge "$CurOpenGA_VER" ]; then
      CurOpenGA_VER=$FoundOpenGA_VER
      LatestZip="$f"
    fi
  fi
done
IFS=$oIFS

[ -z "$LatestZip" ] && exxit 1
[ -f "$CurVerInfo" ] && OpenGA_VER="`grep_prop 'ro.addon.open_version' $CurVerInfo`" || OpenGA_VER=0

if [ "$CurOpenGA_VER" -gt "$OpenGA_VER" ]; then
  GAppsZip="$LatestZip"
else
  [ -f /data/r ] && GAppsZip="$LatestZip" || exxit 0
fi
wipe_modPath

OpenGAPackage="`unzip -pqo "$GAppsZip" g.prop | sed -n '/ro.addon.open_type/s/.*=//p'`-$CurOpenGA_VER"

# pseudo system packages
sysApp="$(ls -d /system/app/*)"
sysPrivApp="$(ls -d /system/priv-app/*)"
vendorApp="$(ls -d /vendor/bundled-app/* 2>/dev/null)"

# prepare NewSystemPath & NewVendorPath
cp -af /system/build.prop $INSTALLER/build.prop
umount -l /system_root 2>/dev/null
umount -l /system 2>/dev/null
mount_check /system
NewSystemPath=$modPath/system
NewVendorPath=$NewSystemPath/vendor
mkdir $NewSystemPath
bind_mount $NewSystemPath /system
if [ -d /vendor ]; then
  umount -l /vendor 2>/dev/null
  mount_check /vendor
  mkdir $NewVendorPath
  bind_mount $NewVendorPath /vendor
fi

# create pseudo-system packages
for d in $sysApp $sysPrivApp $vendorApp; do
  mktouch ${modPath}$d/.replace
done

# extract OpenGApps install scripts
GAppsTmpDir="$INSTALLER/OpenGApps"
GAppsInstaller=$GAppsTmpDir/META-INF/com/google/android/update-binary
mkdir "$GAppsTmpDir" 2>/dev/null
unzip -o "$GAppsZip" "META-INF/*" -d "$GAppsTmpDir" >&2
unzip -o "$GAppsZip" installer.sh -d /tmp >&2


# patch GApps install scripts
sed -i '/SYSTEM=\/system\/system/s/m\/system/m/; \
  /abpartition=true/s/true/false/; \
  /ui_print.*ounting/d; \
  /ui_print.*lation.*omplete/d; \
  /ui_print.*sys.*space.*tions/d; \
  /ui_print.*emoving/d' /tmp/installer.sh

if grep -q slot_suffix /proc/cmdline; then
  sed -i '/ln \-/s/\/system\/\$libfolder/\/system\/system\/\$libfolder/g' /tmp/installer.sh
  sed -i '/ln \-/s/\$SYSTEM\/\$libfolder/\/system\/system\/\$libfolder/g' /tmp/installer.sh
fi

sed -i '/vrmode_compat=false/a faceunlock_compat=true' /tmp/installer.sh
sed -i '/vrmode_compat=false/s/false/true/' /tmp/installer.sh

sed -i 's/unzip \-o/unzip \-n/' $GAppsInstaller


# (re-)Install OpenGApps
cp -af $INSTALLER/build.prop $NewSystemPath
set_perm $GAppsInstaller 0 0 755
set_perm /tmp/installer.sh 0 0 755
sh $GAppsInstaller dummy "$oOutFD" "$GAppsZip"

# disable conflicting and/or unwanted system APKs
{ umount -l /system
umount -l /vendor; } 2>/dev/null
mount_partitions
disable_apks

# update module.prop to reflect OpenGApps version
sed -i "2s/$/ ($OpenGAPackage)/" $INSTALLER/module.prop

# cleanup
rm $modPath/system/build.prop
rm -rf $modPath/system/addon.d
[ "`ls -A $NewVendorPath`" ] || rm -rf $NewVendorPath

# auto Mount
mktouch $modPath/auto_mount

# module info
cp $INSTALLER/module.prop $modPath/

# etc must be ready earlier to prevent runtime permission issues
cp -af $modPath/system/etc /data/adb/magisk_simple/system
cp -af $modPath/system/etc /cache/magisk_mount/system
mv $INSTALLER/service.sh $modPath/
set_perm $modPath/service.sh 0 0 755

# gms manager
mv -f $INSTALLER/MagicGApps.sh $mountPath/.core/service.d/
set_perm $mountPath/.core/service.d/MagicGApps.sh 0 0 755

unmount_all
shrink_img

ui_print "- Installation complete"
ui_print " "

whatsNew="- Max OpenGApps search directory depth set to 3 for faster speed.
- Support for latest Magisk versions
- Updated documentation
- Use /dev/urandom over /dev/random.
- Use Magisk imgtool over make_ext4fs and resize2fs."

ui_print "  WHAT'S NEW"
echo "$whatsNew" | \
  while read c; do
    ui_print "    $c"
  done

ui_print " "
ui_print "  LINKS"
ui_print "    - Facebook Page: facebook.com/VR25-at-xda-developers-258150974794782"
ui_print "    - Git Repository: github.com/Magisk-Modules-Repo/MagicGApps"
ui_print "    - XDA Thread: forum.xda-developers.com/apps/magisk/module-systemless-beansgapps-mini-7-1-x-t3611362"
ui_print " "

exit 0
